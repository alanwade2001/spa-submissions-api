// Code generated by schema-generate. DO NOT EDIT.

package customer

import (
    "bytes"
    "encoding/json"
    "errors"
)

// AccountReference 
type AccountReference struct {
  BIC string `json:"BIC,omitempty"`
  IBAN string `json:"IBAN,omitempty"`
  Name string `json:"Name,omitempty"`
}

// CustomerModel Json Model of the Customer
type CustomerModel struct {

  // the customer is active
  Active bool `json:"Active"`

  // unique identifier
  Id string `json:"_id,omitempty"`

  // the initiating parties acting on behalf of customer
  InitiatingParties []*InitiatingParty `json:"InitiatingParties,omitempty"`

  // Name of the customer
  Name string `json:"Name"`
  Users []*UserReference `json:"Users,omitempty"`
}

// InitiatingParty 
type InitiatingParty struct {
  Id string `json:"Id,omitempty"`
  Name string `json:"Name,omitempty"`
  RegisteredAccounts []*AccountReference `json:"RegisteredAccounts,omitempty"`
}

// UserReference 
type UserReference struct {
  Email string `json:"Email,omitempty"`
}

func (strct *CustomerModel) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Active" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Active" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Active\": ")
	if tmp, err := json.Marshal(strct.Active); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "_id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"_id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "InitiatingParties" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"InitiatingParties\": ")
	if tmp, err := json.Marshal(strct.InitiatingParties); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "Name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "Users" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"Users\": ")
	if tmp, err := json.Marshal(strct.Users); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CustomerModel) UnmarshalJSON(b []byte) error {
    ActiveReceived := false
    NameReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "Active":
            if err := json.Unmarshal([]byte(v), &strct.Active); err != nil {
                return err
             }
            ActiveReceived = true
        case "_id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "InitiatingParties":
            if err := json.Unmarshal([]byte(v), &strct.InitiatingParties); err != nil {
                return err
             }
        case "Name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            NameReceived = true
        case "Users":
            if err := json.Unmarshal([]byte(v), &strct.Users); err != nil {
                return err
             }
        }
    }
    // check if Active (a required property) was received
    if !ActiveReceived {
        return errors.New("\"Active\" is required but was not present")
    }
    // check if Name (a required property) was received
    if !NameReceived {
        return errors.New("\"Name\" is required but was not present")
    }
    return nil
}
