// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/alanwade2001/spa-submissions-api/repositories"
	"github.com/alanwade2001/spa-submissions-api/routers"
	"github.com/alanwade2001/spa-submissions-api/services"
	"github.com/alanwade2001/spa-submissions-api/types"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitialiseServerAPI() types.ServerAPI {
	engine := gin.Default()
	userAPI := services.NewUserService()
	idGeneratorAPI := services.NewMongoIdGenerator()
	repositoryAPI := repositories.NewMongoService()
	xmlParserAPI := services.NewXMLParserAPI()
	groupHeaderMapperAPI := services.NewGroupHeaderMapper()
	paymentInformationMapperAPI := services.NewPaymentInformationMapper()
	initiationMapperAPI := services.NewInitiationMapper(groupHeaderMapperAPI, paymentInformationMapperAPI)
	initiationAPI := services.NewInitiationService(xmlParserAPI, initiationMapperAPI)
	validatorAPI := services.NewValidator()
	customerAPI := services.NewCustomerService()
	messageAPI := services.NewMessageService()
	submissionServiceAPI := services.NewSubmissionService(idGeneratorAPI, repositoryAPI, initiationAPI, validatorAPI, customerAPI, messageAPI)
	submissionAPI := routers.NewSubmissionRouter(userAPI, submissionServiceAPI)
	registerAPI := routers.NewRegisterService(engine, submissionAPI)
	configAPI := services.NewConfigService()
	serverAPI := NewServer(engine, registerAPI, configAPI)
	return serverAPI
}

func InitialiseMockedServerAPI() types.ServerAPI {
	engine := gin.Default()
	userAPI := services.NewUserService()
	idGeneratorAPI := services.NewMongoIdGenerator()
	repositoryAPI := repositories.NewMongoService()
	xmlParserAPI := services.NewXMLParserAPI()
	groupHeaderMapperAPI := services.NewGroupHeaderMapper()
	paymentInformationMapperAPI := services.NewPaymentInformationMapper()
	initiationMapperAPI := services.NewInitiationMapper(groupHeaderMapperAPI, paymentInformationMapperAPI)
	initiationAPI := services.NewInitiationService(xmlParserAPI, initiationMapperAPI)
	validatorAPI := services.NewValidator()
	customerAPI := services.NewMockCustomerService()
	messageAPI := services.NewMessageService()
	submissionServiceAPI := services.NewSubmissionService(idGeneratorAPI, repositoryAPI, initiationAPI, validatorAPI, customerAPI, messageAPI)
	submissionAPI := routers.NewSubmissionRouter(userAPI, submissionServiceAPI)
	registerAPI := routers.NewRegisterService(engine, submissionAPI)
	configAPI := services.NewConfigService()
	serverAPI := NewServer(engine, registerAPI, configAPI)
	return serverAPI
}
